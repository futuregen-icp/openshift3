------------command
ansible-playbook -i hosts-imsi ./allcertificateexpiredate.yaml -k -e "ansible_become_user='root' ansible_become_pass='imsi'"


--------------------------------script 1 file
#!/bin/bash

##
## print-all-cert-expire-date.sh - OpenShift script to print all TLS cert expire date
##
## - This scrpit is designed to run with root user as it reads files under /etc/origin directory
## - Do not use `openssl x509 -in` command which can only handle first cert in a given input
##

VERBOSE=false
if [ "$1" == "-v" ]; then
VERBOSE=true
fi

rm -rf ./DaysRemaining.imsi ./DaysRemaining.txt ./detailinfo.txt

cat /dev/null > detailinfo.txt
function show_cert() {
HN=`hostname`
if [ "$VERBOSE" == "true" ]; then
openssl crl2pkcs7 -nocrl -certfile /dev/stdin | openssl pkcs7 -print_certs -text | egrep -A9 ^Cert >> detailinfo.txt
else
openssl crl2pkcs7 -nocrl -certfile /dev/stdin | openssl pkcs7 -print_certs -text | grep Validity -A2 >> detailinfo.txt
fi
}

## Process all cert files under /etc/origin/{master,node} directories

CERT_FILES=$(find /etc/origin/{master,node} -type f \( -name '*.crt' -o -name '*pem' \))
for f in $CERT_FILES; do
echo "- $f" >> detailinfo.txt
cat $f | show_cert
done

## Process all kubeconfig files under /etc/origin/{master,node} directories

KUBECONFIG_FILES=$(find /etc/origin/{master,node} -type f -name '*kubeconfig')
for f in $KUBECONFIG_FILES; do
echo "- $f" >> detailinfo.txt
awk '/cert/ {print $2}' $f | base64 -d | show_cert
done

## Process all service serving cert secrets

oc get service --no-headers --all-namespaces -o custom-columns='NAMESPACE:{metadata.namespace},NAME:{metadata.name},SERVING CERT:{metadata.annotations.service\.alpha\.openshift\.io/serving-cert-secret-name}' |
while IFS= read line; do
items=( $line )
NAMESPACE=${items[0]}
SERVICE=${items[1]}
SECRET=${items[2]}
if [ $SECRET == "" ]; then
continue
fi
echo "- secret/$SECRET -n $NAMESPACE" >> detailinfo.txt
oc get secret/$SECRET -n $NAMESPACE --template='{{index .data "tls.crt"}}' | base64 -d | show_cert
done

## Process other custom TLS secrets, router, docker-registry, logging and metrics components

cat <default router-certs tls.crt
default registry-certificates registry.crt
kube-service-catalog apiserver-ssl tls.crt
openshift-metrics-server metrics-server-certs ca.crt
openshift-metrics-server metrics-server-certs tls.crt
openshift-logging logging-elasticsearch admin-ca
openshift-logging logging-elasticsearch admin-cert
openshift-logging logging-curator ca
openshift-logging logging-curator cert
openshift-logging logging-fluentd ca
openshift-logging logging-fluentd cert
openshift-logging logging-fluentd ops-ca
openshift-logging logging-fluentd ops-cert
openshift-logging logging-kibana ca
openshift-logging logging-kibana cert
openshift-logging logging-kibana-proxy server-cert
openshift-infra hawkular-metrics-certs ca.crt
openshift-infra hawkular-metrics-certs tls.crt
openshift-infra hawkular-metrics-certs tls.truststore.crt
openshift-infra hawkular-cassandra-certs tls.crt
openshift-infra hawkular-cassandra-certs tls.client.truststore.crt
openshift-infra hawkular-cassandra-certs tls.peer.truststore.crt
openshift-infra heapster-certs tls.crt
EOF
while IFS= read line; do
items=( $line )
NAMESPACE=${items[0]}
SECRET=${items[1]}
FIELD=${items[2]}
echo "- secret/$SECRET -n $NAMESPACE, field: $FIELD" >> detailinfo.txt
oc get secret/$SECRET -n $NAMESPACE --template="{{index .data \"$FIELD\"}}" | base64 -d | show_cert
done

function output_transform() {
while read line; do
SECRET=`echo "${line}" | awk '{print substr($0,0,2)}'`
BEFORE=`echo "${line}" |awk -F ": " '{print $1}' |cut -d'B' -f2`
AFTER=`echo "${line}" |awk -F ": " '{print $1}' |cut -d'A' -f2`
if [ "${SECRET}" == "- " ]; then
echo "${line}"
elif [ "${BEFORE}" == "efore" ]; then
BEFORE_DATE_IMSI=`echo "${line}" |awk -F ": " '{print $2}'`
BEFORE_DATE=`date "+%Y%m%d" -d "${BEFORE_DATE_IMSI}"`
elif [ "${AFTER}" == "fter " ]; then
AFTER_DATE_IMSI=`echo "${line}" |awk -F ": " '{print $2}'`
AFTER_DATE=`date "+%Y%m%d" -d "${AFTER_DATE_IMSI}"`
DaysRemaining=$((($(date +%s -d "${AFTER_DATE}") - $(date +%s -d "${BEFORE_DATE}"))/86400))
echo "Days Remaining : " ${DaysRemaining}
fi
done < ./detailinfo.txt
}

if [ "$1" -gt 0 ] 2>/dev/null ;then
output_transform > DaysRemaining.imsi
while read line; do
SECRET=`echo "${line}" | awk '{print substr($0,0,2)}'`
if [ "${SECRET}" == "- " ]; then
SECRETLINE=${line}
fi
DR=`echo "${line}" | awk '{print $4}'`
DR=${DR:=10000}
if [ "${DR}" -lt $1 ] 2>/dev/null ;then
echo "${SECRETLINE}" >> DaysRemaining.txt
echo "${line}" >> DaysRemaining.txt
fi
done < ./DaysRemaining.imsi
rm -f ./DaysRemaining.imsi
else
output_transform > DaysRemaining.txt
fi
------------------------




--------------------------------script 2 file
[imsi@bastion allcertificateexpiredate]$ cat allcertificateexpiredate-2.sh
VERBOSE=false
if [ "$1" == "-v" ]; then
VERBOSE=true
fi

function show_cert() {
if [ "$VERBOSE" == "true" ]; then
openssl crl2pkcs7 -nocrl -certfile /dev/stdin | openssl pkcs7 -print_certs -text | egrep -A9 ^Cert
else
openssl crl2pkcs7 -nocrl -certfile /dev/stdin | openssl pkcs7 -print_certs -text | grep Validity -A2
fi
}

## Process all cert files under /etc/origin/{master,node} directories

CERT_FILES=$(find /etc/origin/node -type f \( -name '*.crt' -o -name '*pem' \))
HN=`hostname`
for f in $CERT_FILES; do
echo "$HN - $f"
cat $f | show_cert
done



--------------------------------playbook file 

- hosts: master01
tasks:
- name: "copy script"
copy: src=./allcertificateexpiredate-1.sh dest=/home/imsi mode=0755
- name: "run shell"
shell: bash /home/imsi/allcertificateexpiredate-1.sh > /home/imsi/allcertificateexpiredate.log
become: yes
- name: "collected"
fetch: src=/home/imsi/allcertificateexpiredate.log dest=/home/imsi
- hosts: allnode
tasks:
- name: "copy script"
copy: src=./allcertificateexpiredate-2.sh dest=/home/imsi mode=0755
- name: "run shell"
shell: bash /home/imsi/allcertificateexpiredate-2.sh > /home/imsi/allcertificateexpiredate_node_cert.log
become: yes
- name: "collected"
fetch: src=/home/imsi/allcertificateexpiredate_node_cert.log dest=/home/imsi






--------------------------------inventory file 
imsi@bastion allcertificateexpiredate]$ cat hosts-imsi
[master01]
master01

[allnode]
master01
master02
